{"version":3,"sources":["ng://ngx-tags-input/lib/tags-input.service.ts","ng://ngx-tags-input/lib/tags-input.component.ts","ng://ngx-tags-input/lib/tags-input.module.ts"],"names":["TagsInputService","Injectable","args","providedIn","noop","CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TagsInputComponent","multi","this","selected","tags","id1","Math","random","toString","substring","id2","onTouchedCallback","onChangeCallback","type","removeLastOnBackspace","canDeleteTags","placeholder","options","displayField","minLengthBeforeOptions","scrollableOptions","scrollableOptionsInView","onTagsChanged","EventEmitter","onMaxTagsReached","onNoOptionsMatch","prototype","ngOnInit","getPlaceHolder","length","tagsChanged","tag","emit","change","maximumOfTagsReached","removeLastTag","tagInput","value","removeTag","addTag","trim","_a","addPredefinedTag","push","tagToRemove","isDeleteable","filter","maxTags","deleteable","typeaheadOnSelect","e","item","typeaheadOnNoMatch","writeValue","_this","map","v","registerOnChange","fn","registerOnTouched","Component","selector","template","providers","Input","Output","TagsInputModule","forRoot","ngModule","NgModule","declarations","imports","CommonModule","FormsModule","TypeaheadModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TagsInputService {\n\n  constructor() { }\n}\n","import { Component, OnInit, forwardRef, Output, Input, EventEmitter} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\n\n\nconst noop = () => {};\n\nconst CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TagsInputComponent),\n    multi: true\n};\n\n@Component({\n  selector: 'tags-input',\n  templateUrl: './tags-input.component.html',\n  styleUrls: ['./tags-input.component.scss'],\n  providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR]\n})\nexport class TagsInputComponent implements OnInit, ControlValueAccessor {\n selected:string = '';\n  public tags: any[] = [];\n  id1 = Math.random ().toString (36).substring (7);\n  id2 = Math.random ().toString (36).substring (7);\n   onTouchedCallback: () => void = noop;\n   onChangeCallback: (_: any) => void = noop;\n\n  @Input() maxTags: number;\n  @Input() type: string = 'light';\n  @Input() removeLastOnBackspace: boolean = false;\n  @Input() canDeleteTags: boolean = true;\n  @Input() placeholder: string = '';\n  @Input() options: any = null;\n  @Input() displayField: string = 'displayValue';\n  @Input() minLengthBeforeOptions: number = 1;\n  @Input() scrollableOptions: boolean = false;\n  @Input() scrollableOptionsInView: number = 5;\n  @Output() onTagsChanged = new EventEmitter();\n  @Output() onMaxTagsReached = new EventEmitter();\n  @Output() onNoOptionsMatch = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n\n \n   getPlaceHolder(): string {\n    if(this.tags && this.tags.length > 0){\n        return '';\n    }\n    return this.placeholder;\n}\n   tagsChanged(type: string, tag: any): void {\n      this.onChangeCallback(this.tags);\n      this.onTagsChanged.emit({\n          change: type,\n          tag: tag\n      });\n      if(this.maximumOfTagsReached()){\n          this.onMaxTagsReached.emit();\n      }\n  }\n\n   removeLastTag(tagInput: HTMLInputElement): void {\n      if(!this.removeLastOnBackspace || !this.tags.length) {\n          return;\n      }\n\n      if (tagInput.value === ''){\n          this.removeTag(this.tags[this.tags.length-1]);\n      }\n  }\n\n   addTag(tagInput: HTMLInputElement): void {\n      if (tagInput.value.trim() !== ''){\n          let tag =  { [this.displayField]: tagInput.value };\n          this.addPredefinedTag(tag);\n      }\n      tagInput.value = '';\n  }\n\n   addPredefinedTag(tag: Object): void {\n      if (!this.tags) this.tags = [];\n      if (!this.maximumOfTagsReached()){\n          this.tags.push(tag);\n          this.tagsChanged('add', tag);\n      }\n  }\n\n   removeTag(tagToRemove: any): void {\n      if(!this.isDeleteable(tagToRemove)){\n          return;\n      }\n      this.tags = this.tags.filter(tag => tagToRemove !== tag);\n      this.tagsChanged('remove', tagToRemove);\n  }\n\n   maximumOfTagsReached(): boolean {\n      return typeof this.maxTags !== 'undefined' && this.tags.length>=this.maxTags;\n  }\n\n   isDeleteable(tag: any) {\n      if(typeof tag.deleteable !== \"undefined\" && !tag.deleteable){\n          return false;\n      }\n      return this.canDeleteTags;\n  }\n  \n   typeaheadOnSelect(e:any):void {\n      if(typeof e.item === 'string'){\n          this.addPredefinedTag({ [this.displayField]: e.value });\n      }else {\n          this.addPredefinedTag(e.item);\n      }\n      this.selected = '';\n  }\n\n   typeaheadOnNoMatch(e:any):void {\n      if(typeof this.onNoOptionsMatch !== 'undefined'){\n          this.onNoOptionsMatch.emit(e)\n      }\n  }\n\n  writeValue(value: any) {\n      if (value !== this.tags) {\n          this.tags = value.map ((v:any) => ({ [this.displayField]: v }));\n      }\n  }\n\n  registerOnChange(fn: any) {\n      this.onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: any) {\n      this.onTouchedCallback = fn;\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TypeaheadModule } from 'ngx-bootstrap';\nimport { TagsInputComponent } from './tags-input.component';\n\n@NgModule({\n  declarations: [TagsInputComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    TypeaheadModule.forRoot()\n  ],\n  exports: [TagsInputComponent]\n})\nexport class TagsInputModule { \n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: TagsInputModule,\n      providers: []\n    };\n  }\n}\n"]}