{"version":3,"sources":["ng://ngx-tags-input/lib/tags-input.service.ts","ng://ngx-tags-input/lib/tags-input.component.ts","ng://ngx-tags-input/lib/tags-input.module.ts"],"names":["TagsInputService","Injectable","args","providedIn","noop","CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TagsInputComponent","multi","this","selected","tags","onTouchedCallback","onChangeCallback","type","removeLastOnBackspace","canDeleteTags","placeholder","options","displayField","minLengthBeforeOptions","onTagsChanged","EventEmitter","onMaxTagsReached","onNoOptionsMatch","prototype","ngOnInit","getPlaceHolder","length","tagsChanged","tag","emit","change","maximumOfTagsReached","removeLastTag","tagInput","value","removeTag","addTag","console","log","trim","_a","addPredefinedTag","push","tagToRemove","isDeleteable","filter","maxTags","deleteable","writeValue","registerOnChange","fn","registerOnTouched","Component","selector","template","providers","Input","Output","TagsInputModule","forRoot","ngModule","NgModule","declarations","imports","CommonModule","FormsModule","NgbTypeaheadModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TagsInputService {\n\n  constructor() { }\n}\n","import { Component, OnInit, forwardRef, Output, Input, EventEmitter} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\n\n\nconst noop = () => {};\n\nconst CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TagsInputComponent),\n    multi: true\n};\n\n@Component({\n  selector: 'tags-input',\n  templateUrl: './tags-input.component.html',\n  styleUrls: ['./tags-input.component.scss'],\n  providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR]\n})\nexport class TagsInputComponent implements OnInit, ControlValueAccessor {\n   selected:string = '';\n  public tags: any[] = [];\n   onTouchedCallback: () => void = noop;\n   onChangeCallback: (_: any) => void = noop;\n\n  @Input() maxTags: number;\n  @Input() type: string = 'light';\n  @Input() removeLastOnBackspace: boolean = false;\n  @Input() canDeleteTags: boolean = true;\n  @Input() placeholder: string = '';\n  @Input() options: any = null;\n  @Input() displayField: string = 'displayValue';\n  @Input() minLengthBeforeOptions: number = 1;\n  @Input() inputFormatter: Function;\n  //@Input() scrollableOptions: boolean = false;\n  //@Input() scrollableOptionsInView: number = 5;\n  @Output() onTagsChanged = new EventEmitter();\n  @Output() onMaxTagsReached = new EventEmitter();\n  @Output() onNoOptionsMatch = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n\n   getPlaceHolder(): string {\n    if(this.tags && this.tags.length > 0){\n        return '';\n    }\n    return this.placeholder;\n}\n\n   tagsChanged(type: string, tag: any): void {\n      this.onChangeCallback(this.tags);\n      this.onTagsChanged.emit({\n          change: type,\n          tag: tag\n      });\n      if(this.maximumOfTagsReached()){\n          this.onMaxTagsReached.emit();\n      }\n  }\n\n   removeLastTag(tagInput: HTMLInputElement): void {\n      if(!this.removeLastOnBackspace || !this.tags.length) {\n          return;\n      }\n\n      if (tagInput.value === ''){\n          this.removeTag(this.tags[this.tags.length-1]);\n      }\n  }\n\n   addTag(tagInput: HTMLInputElement): void {\n       console.log (tagInput)\n      if (tagInput.value.trim() !== ''){\n          let tag = {\n              [this.displayField]: tagInput.value\n          };\n          this.addPredefinedTag(tag);\n      }\n      tagInput.value = '';\n  }\n\n   addPredefinedTag(tag: Object): void {\n      if (!this.maximumOfTagsReached()){\n          this.tags.push(tag);\n          this.tagsChanged('add', tag);\n      }\n  }\n\n   removeTag(tagToRemove: any): void {\n      if(!this.isDeleteable(tagToRemove)){\n          return;\n      }\n      this.tags = this.tags.filter(tag => tagToRemove !== tag);\n      this.tagsChanged('remove', tagToRemove);\n  }\n\n   maximumOfTagsReached(): boolean {\n      return typeof this.maxTags !== 'undefined' && this.tags.length>=this.maxTags;\n  }\n\n   isDeleteable(tag: any) {\n      if(typeof tag.deleteable !== \"undefined\" && !tag.deleteable){\n          return false;\n      }\n      return this.canDeleteTags;\n  }\n/*\n   typeaheadOnSelect(e):void {\n      if(typeof e.item === 'string'){\n          this.addPredefinedTag({\n              [this.displayField]: e.value\n          });\n      }else {\n          this.addPredefinedTag(e.item);\n      }\n      this.selected = '';\n  }\n\n   typeaheadOnNoMatch(e:any):void {\n      if(typeof this.onNoOptionsMatch !== 'undefined'){\n          this.onNoOptionsMatch.emit(e)\n      }\n  }\n*/\n  writeValue(value: any) {\n      if (value !== this.tags) {\n          this.tags = value;\n      }\n  }\n\n  registerOnChange(fn: any) {\n      this.onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: any) {\n      this.onTouchedCallback = fn;\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport {NgbTypeaheadModule } from '@ng-bootstrap/ng-bootstrap';\nimport { TagsInputComponent } from './tags-input.component';\n\n@NgModule({\n  declarations: [TagsInputComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    NgbTypeaheadModule\n  ],\n  exports: [TagsInputComponent]\n})\nexport class TagsInputModule { \n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: TagsInputModule,\n      providers: []\n    };\n  }\n}\n"]}